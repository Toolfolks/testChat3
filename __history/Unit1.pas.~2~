unit Unit1;

interface

uses
  System.SysUtils, System.Classes, JS, Web, WEBLib.Graphics, WEBLib.Controls,
  WEBLib.Forms, WEBLib.Dialogs, Vcl.StdCtrls, WEBLib.StdCtrls, WEBLib.REST,
  Vcl.Controls, WEBLib.JSON, WEBLib.ExtCtrls;

type
  TForm1 = class(TWebForm)
    WebButton1: TWebButton;
    WebHttpRequest1: TWebHttpRequest;
    WebMemo1: TWebMemo;
    WebMultimediaPlayer1: TWebMultimediaPlayer;
    procedure WebButton1Click(Sender: TObject);
    procedure HandleVoiceInput(const Transcript: string);
    procedure ExecuteJavaScript(const script: string);
    procedure PlayAudioStream(Sender: TObject; AResponse: TJSXMLHttpRequest);
    procedure WebHttpRequest1Error(Sender: TObject;
      ARequest: TJSXMLHttpRequestRecord; Event: TJSEventRecord;
      var Handled: Boolean);
    procedure WebHttpRequest1Response2(Sender: TObject; AResponse: TJSXMLHttpRequest);
    //procedure WebHttpRequest1Response(Sender: TObject; AResponse: string);
    procedure WebHttpRequest1Response(Sender: TObject; AResponse: TJSXMLHttpRequest);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.WebButton1Click(Sender: TObject);
begin
  HandleVoiceInput('Hello, world! This is some test audio I need you to say peeps. Thankyou.');


end;









procedure TForm1.WebHttpRequest1Response2(Sender: TObject; AResponse: TJSXMLHttpRequest);
var
  audioUrl: string;
begin
  asm
    var audioBlob = AResponse.response;  // Access the Blob response directly
    if (audioBlob) {
      var audioUrl = URL.createObjectURL(audioBlob);  // Create URL for the Blob
      var audio = new Audio(audioUrl);  // Create an audio object with the Blob URL
      audio.play().catch(function(error) {
        console.error('Error playing audio:', error);  // Log any errors if playback fails
      });
    } else {
      console.error('No audio blob found in response');  // This should not happen if the response type is correctly set to blob
    }
  end;
end;




procedure TForm1.HandleVoiceInput(const Transcript: string);
var
  JSONObj: TJSONObject;
begin
  WebHttpRequest1.URL := 'https://testchat3.onrender.com/stream';  // Use your server URL
  WebHttpRequest1.Command := httpPOST;
  WebHttpRequest1.Headers.Values['Content-Type'] := 'application/json';
  WebHttpRequest1.ResponseType := rtBlob;  // Set response type to Blob

  // Prepare JSON data for the POST request
  JSONObj := TJSONObject.Create;
  try
    JSONObj.AddPair('text', Transcript);
    WebHttpRequest1.PostData := JSONObj.ToJSON;  // Set the POST data
  finally
    JSONObj.Free;
  end;

  // Execute the request with an anonymous method to handle the response and error
  WebHttpRequest1.Execute(
    procedure(AResponse: string; ARequest: TJSXMLHttpRequest)
    begin
      asm
        var blob = ARequest.response;  // Access the response as a Blob
        if (blob && blob.type === 'audio/mpeg') {  // Check if the Blob is of the correct MIME type
          var url = window.URL.createObjectURL(blob);  // Create a URL for the Blob
          var a = document.createElement('a');  // Create an anchor element for downloading the file
          a.href = url;  // Set the href attribute to the Blob URL
          a.download = 'audio.mp3';  // Set the download attribute to specify the filename
          document.body.appendChild(a);  // Append the link to the document
          a.click();  // Trigger a click to download the file
          document.body.removeChild(a);  // Remove the link after downloading
          window.URL.revokeObjectURL(url);  // Clean up by revoking the Blob URL
        } else {
          console.error('Incorrect file type received: ' + (blob ? blob.type : 'null'));  // Log an error if the file type is incorrect
        }
      end;
    end,

    // Error handler anonymous method
    procedure(ARequest: TJSXMLHttpRequest)
    begin
      ShowMessage('HTTP request failed. Status: ' + ARequest.status.ToString + ' ' + ARequest.statusText);  // Display an error message
    end
  );
end;



// Handle the response from the HTTP request
procedure TForm1.WebHttpRequest1Response(Sender: TObject; AResponse: TJSXMLHttpRequest);
begin
  asm
    var blob = AResponse.response;  // Access the response as a Blob
    if (blob && blob.type === 'audio/mpeg') {  // Check if the Blob is of the correct MIME type
      var url = window.URL.createObjectURL(blob);  // Create a URL for the Blob
      var a = document.createElement('a');  // Create an anchor element for downloading the file
      a.href = url;  // Set the href attribute to the Blob URL
      a.download = 'audio.mp3';  // Set the download attribute to specify the filename
      document.body.appendChild(a);  // Append the link to the document
      a.click();  // Trigger a click to download the file
      document.body.removeChild(a);  // Remove the link after downloading
      window.URL.revokeObjectURL(url);  // Clean up by revoking the Blob URL
    } else {
      console.error('Incorrect file type received: ' + (blob ? blob.type : 'null'));  // Log an error if the file type is incorrect
    }
  end;
end;

// Handle any errors that occur during the HTTP request
procedure TForm1.WebHttpRequest1Error(Sender: TObject; ARequest: TJSXMLHttpRequestRecord; Event: TJSEventRecord; var Handled: Boolean);
begin
  ShowMessage('HTTP request failed. Status: ' + ARequest.req.Status.ToString + ' ' + ARequest.req.StatusText);  // Display an error message
  Handled := True;  // Indicate that the error has been handled
end;





procedure TForm1.PlayAudioStream(Sender: TObject; AResponse: TJSXMLHttpRequest);
var
  audioUrl: string;
begin
  asm
    var audioBlob = AResponse.response;  // Access the response as a Blob
    audioUrl = URL.createObjectURL(audioBlob);  // Create a URL for the blob
    var audio = new Audio(audioUrl);  // Create an audio object
    audio.play();  // Play the audio
  end;
end;

procedure TForm1.ExecuteJavaScript(const script: string);
begin
  asm
    eval(script);
  end;
end;

end.

